问题描述：
207. 课程表
现在你总共有n门课需要选，记为0到n-1。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程0，你需要先完成课程1，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？

示例 1:

输入: 2, [[1,0]]
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。

示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。

问题分析：
解决方法：

（1）使用图的深度优先搜索，从一个点从发，深度搜索每一条路径。

（2） 对每次走过的路径顶点，进行标记，说明已经走过。

（3）如果当前顶点，已经被标记走过了，则表示有回路，否则继续深度前行。

（4）在回溯的过程中，要对当前顶点，重新标记，即，没走过。

（5）特别注意 的一点，要记得剪枝情况，如果访问一个点，从这个点从发可以得到正确的解，那些下次再次访问到这个点的时候，将不再继续向下搜索。
如果不进行剪枝，提交会超时。所以可以对访问过的顶点，设置三个标志。

Python3实现： 
# @Time   :2018/12/04
# @Author :LiuYinxing
# 深度优先搜索，时间复杂度是O(N ^ 2)，空间复杂度是O(N)。
# DFS,本质是找有没有闭环，搜索着发现又回到自己的位置了

class Solution:
    def canFinish(self, numCourses, prerequisites):
    
         ###### 1.创建各个点点链接关系，即graph表，另建visit是对每个点到访记录做标记
         
        graph = [[] for _ in range(numCourses)]
        visit = [0 for _ in range(numCourses)]
        for x, y in prerequisites:  # 转换成邻接表的形式
            graph[x].append(y)

        ###### 2.建立DFS从某点开始沿着他的连接点进行搜索
        
        def dfs(graph, v):  # 从顶点v 出发深度优先搜索图G，判断图中是否存在回路
            visit[v] = -1  # 访问过标记

            for w in graph[v]:  # 遍历 v 的邻接点
                if visit[w] == -1: return False  # 如果w已经访问过，必存在回路，直接返回即可
                if visit[w] == 1: continue  # 剪枝

                if not dfs(graph, w): return False  # 如果从w出发，发现回路，则返回（进入递归调用）

            visit[v] = 1  # 被访问过，从这个点从发得到的结果是正确的，标记1，避免下次继续访问，剪枝情况
            return True
            
        #### 3.列出来的每个点都进行一遍遍历
        
        for v in range(numCourses):
            if not dfs(graph, v):
                return False
        return True
————————————————
版权声明：本文为CSDN博主「GrowthDiary007」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/XX_123_1_RJ/article/details/84787393

################ 另一种思路方法
方法一：拓扑排序，BFS
看到给的第二个测试用例立马就明白了，就是判断这些课程能否构成有向无环图（DAG）。而任何时候判断DAG的方法要立刻想到拓扑排序。

拓扑排序是对有向无环图（DAG）而言的，对图进行拓扑排序即求其中节点的一个拓扑序列，对于所有的有向边（U, V）（由U指向V），在该序列中节点U都排在节点V之前。

方法是每次选择入度为0的节点，作为序列的下一个节点，然后移除该节点和以从节点出发的所有边。

那这个方法比较简单粗暴了：要循环N次，这个循环次数并不是遍历节点的意思，而是我们如果正常取点的话，N次就能把所有的节点都取完了，如果N次操作结束还没判断出来，那么就不是DAG.在这N次中，每次都找一个入度为0的点，并把它的入度变为-1，作为已经取过的点不再使用，同时把从这个点指向的点的入度都-1.

这个过程中，如果找不到入度为0的点，那么说明存在环。如果N次操作，每次都操作成功的去除了一个入度为0的点，那么说明这个图是DAG.

时间复杂度是O(N ^ 2)，空间复杂度是O(N)。

import collections
def canFinish(N, prerequisites):
    """
    :type N,: int
    :type prerequisites: List[List[int]]
    :rtype: bool
    """
    graph = collections.defaultdict(list)
    indegrees = collections.defaultdict(int)
    for u, v in prerequisites:
        graph[v].append(u)
        indegrees[u] += 1
    print(graph,indegrees)
    
    for i in range(N):
        zeroDegree = False
        for j in range(N):
            print(j)
            if indegrees[j] == 0:
                print(j,indegrees[j])
                zeroDegree = True
                break
        print(zeroDegree)
        if not zeroDegree: return False
        indegrees[j] = -1
        for node in graph[j]:
            indegrees[node] -= 1
        print(indegrees)
    return True      

就算是一个不存在的key, d[key] 也有一个默认值，这个默认值是int()的默认值0.

