##### 寻找给定和情况下，在list中最小长度的subarray的
Example

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

###### 思路：2个循环暴力解题，从每个七点开始判断，之后和他相加的subarray何时==target，有就记录下来
参考：https://www.youtube.com/watch?v=gHSoIwnERF0

from collections import defaultdict
import sys
 
# Function to find the length of the
# smallest subarray with sum K
def subArraylen(arr, n, K):
 
    # Stores the frequency of
    # prefix sums in the array
    mp = defaultdict(lambda : 0)
 
    mp[arr[0]] = 0
 
    for i in range(1, n):
        arr[i] = arr[i] + arr[i - 1]
        mp[arr[i]] = i
 
    # Initialize ln
    ln = sys.maxsize
 
    for i in range(n):
 
        # If sum of array till i-th
        # index is less than K
        if(arr[i] < K):
 
            # No possible subarray
            # exists till i-th index
            continue
        else:
             
            # Find the exceeded value
            x = K - arr[i]
 
            # If exceeded value is zero
            if(x == 0):
                ln = min(ln, i)
 
            if(x in mp.keys()):
                continue
            else:
                ln = min(ln, i - mp[x])
 
    return ln
 
# Driver Code
arr = [ 1, 2, 4, 3, 2, 4, 1 ]
n = len(arr)
 
K = 7
 
ln = subArraylen(arr, n, K)
 
# Function call
if(ln == sys.maxsize):
    print("-1")
else:
    print(ln)
 
# This code is contributed by Shivam Singh



########################## 类似 LC209 解法
def minSubArrayLen(s, nums):
    """
    :type s: int
    :type nums: List[int]
    :rtype: int
    """
    if sum(nums) < s: return 0
    res = len(nums)+1
    l, r, total = 0, 0, 0
    while r < len(nums):
        total += nums[r]
        while total >= s:
            # move left to the most-right
            if total == s:  ###与209不同，只有在total==target时再把res的最小路径放进备选比较
                res = min(res, r-l+1)
            total -= nums[l]   ###减去total当前最靠左边的数，区间位移一个，但是可以保留当前的和，因为一定会比target小
            l += 1
        r += 1
    return res if res != len(nums)+1 else 0
