#####46
#####题目描述
##### 寻找给定数的所有可能的排列组合

[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
  ]


回溯法是解决排列问题的经典方法，速度也能明显加快。

回溯法的含义是对每个可能的结果进行遍历，如果某个数字已经使用则跳过，如果没有使用则放入path中。这个“回溯”怎么理解？我认识是在递归的过程中使用了一个数组path来保存自己走过的路，如果沿着这条路走完了全部的解，则需要弹出path中的最后一个元素，相当于向后回退，于是叫做回溯法。

下面的做法中，使用了visited数组来保存是否经历过这个位置。


class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        visited = [0] * len(nums)
        res = []
        
        def dfs(path):
            if len(path) == len(nums):
                res.append(path)
            else:
                for i in range(len(nums)):
                    if not visited[i]:
                        visited[i] = 1
                        dfs(path + [nums[i]])
                        visited[i] = 0
        
        dfs([])
        return res


######## 47
######## 找出有可能有重复数字的一个数组的所有全排列。
之前的【LeetCode】46. Permutations 解题报告是没有重复数字的，这个题有重复数字。我的做法很简单，就是在以前的基础上加了一个判断条件：path not in res。这样的做法是在每个path生成之后才去做的判断，因此效率一点都不高。最后竟然也能通过了。

class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        self.helper(nums, res, [])
        return res
    
    def helper(self, nums, res, path):
        if not nums and path not in res:
            res.append(path)
        else:
            for i in range(len(nums)):
                self.helper(nums[:i] + nums[i+1:], res, path + [nums[i]])
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/java/article/details/79513261
