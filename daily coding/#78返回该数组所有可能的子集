题目分析：

这一题是给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。如：
输入: nums = [1,2,3]
输出:
[[3],[1],[2],[1,2,3],[1,3],[2,3],[1,2],[]]

解题思路：（两种解法）

一、这个题可以按照【LeetCode】77. Combinations的方法递归解决（最外层多加个for），过程及其思路请参考【LeetCode】77. Combinations

######### 递归法 DFS ！！！##################
DFS（Deep First Search）深度优先搜索。
递归最重要的是明白递归函数的意义。下面代码的dfs()函数，就是在当前index元素使用的情况下，从nums的index后面抽取0个或者全部数字放入path的后面，
注意这个for循环，意义是当前元素如果使用，后面的那个元素从哪里开始，也就决定了后面的数字选择多少个。

python代码如下：

class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        self.dfs(nums, 0, res, [])
        return res
    
    def dfs(self, nums, index, res, path):          #输入的数据，从哪里开始，定义返回变量名字，返回值是多少
        res.append(path)
        for i in xrange(index, len(nums)):
            self.dfs(nums, i + 1, res, path + [nums[i]])  
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/79359540




二、还有一种牛逼的方法：

先取空列表[]加入res，res = [[]]
然后把[] + nums[0]加进去，res = [[], [1]]
把[] + nums[1], [1] + nums[1]加进去，res = [[], [1], [2], [1, 2]]
[] + nums[2], [1] + nums[2], [2] + nums[2], [1, 2] + nums[2]，res = [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
完毕，基本思路就是每次把res的值都取出来加入新元素再放进去，等于是一个双循环
测试代码（1）：（Runtime: 44 ms, faster than 62.10 % ）

class Solution:
    def subsets(self, nums):
        result = [[]]
        for num in nums:
            result += [i + [num] for i in result]  ##有一个[]使得每次累加积累
        return result

————————————————
版权声明：本文为CSDN博主「Jiale685」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/L141210113/article/details/89053259
