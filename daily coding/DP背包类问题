# dynamic programming in 0-1 Knapsack Problem
import numpy as np

# n: number of objects
# W: total weight
# w: list of weight of each object
# v: list of value of each object
# return: maximum value of 0-1 Knapsack Problem
def Knapsack_01(n, W, w, v):
    # create (n+1)*(W+1) table initialized with all 0
    dp = np.array([[0]*(W+1)]*(n+1))

    # using DP to solve 0-1 Knapsack Problem
    for i in range(1, n+1):
        for j in range(1, W+1):
            # if ith item's weight is bigger than j, then do nothing
            if w[i-1] > j:
                dp[i,j] = dp[i-1, j]
            else: # compare the two situations: putt ith item in or not
                dp[i,j] = max(dp[i-1, j], v[i-1] + dp[i-1, j-w[i-1]])

    return dp[n][W] # maximum value of 0-1 Knapsack Problem

# test
W = 20
w = (1, 2, 5, 6, 7, 9)
v = (1, 6, 18, 22, 28, 36)
n = len(w)

t = Knapsack_01(n, W, w, v)
print('max value : %s'%t)
————————————————
版权声明：本文为CSDN博主「山阴少年」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/jclian91/article/details/80551119
