题目大意
从一个数组中找出三个数字，求这三个数字的乘积是最大的值。

解题方法
方法一：排序
这个题要求数组中三个数乘积最大的值。我觉得可以从为什么问3个数字而不是其他数字去考虑。

输入有可能存在负值，所以3个数字的乘积时会考虑到负负得正的情况。只有三个数都是正数或者有只有两个负数时得到的结果是正的。
这样，首先通过排序，得到最右边三个数的乘积，和最小的两个负数（如果存在负数）和最大数字的乘积，比较两个乘积的大小就行了。 

如果排序后取到的三个数存在奇数个负数也没关系，我们取最大值的时候会保证取到最大的。

class Solution(object):
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        right = nums[-3] * nums[-2] * nums[-1]          ！！！！！！！注意排序是0->inf,小->大 !!!!!
        left = nums[0] * nums[1] * nums[-1]        !!!!! 多考虑不同的情况 ！！！！！！！！
        return max(left, right)
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/79169635
