443. String Compression
Medium

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:

If the group's length is 1, append the character to s.
Otherwise, append the character followed by the group's length.
The compressed string s should not be returned separately, but instead be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.

You must write an algorithm that uses only constant extra space.
 

Example 1:

Input: chars = ["a","a","b","b","c","c","c"]
Output: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

Example 2:

Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
Output: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].
Explanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".

################### Codes ####################
本题leetcode要求只能在原chars里更改

class Solution:
    def compress(self, chars: List[str]) -> int:
      n = len(chars)
      i , count = 0 , 1
      for j in range(1,n+1):  ##取到最大值n是为了else里的chars[i] = chars[j-1]  
          if j < n and chars[j] == chars[j-1]:
              count += 1
          else:
              chars[i] = chars[j-1]  ###这里i只取j-1的值，所以到这里的j最后取n时能够覆盖到最后一位数据
              i += 1.   ##一旦计入，指针要自动后加一位
              if count > 1:    ##注意在题目中，树木唯一的字母后面不加数1
                  for m in str(count):
                      chars[i] = m
                      i += 1
              count = 1
        return i


        
分别设置两个指针，i和j

i为更改后的chars的长度，j为当前便利chars的位置

count为重复次数

当字符串结束重复后

通过移动指针i，将count写入chars

最后返回i的位置，即新的字符串长度
————————————————
版权声明：本文为CSDN博主「zjrn」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/ZJRN1027/article/details/81188486
      
  
