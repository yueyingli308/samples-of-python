题目描述
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

题目大意
求一个矩阵从左上角到右下角的最短路径和。

解题方法
第一感觉是dfs，但是题目没有说范围，估计会超时。然后就想到了DP。

使用DP创建了一个path数组，和grid数组是一样的。path代表了从左上角开始到某个点的最短路径。那么很容易知道，新的一个点的最短路径一定等于其上方、左方最短路径+当前的值。
！！！！！！这也是本题的特殊点，该点的特殊值只源于左方或者上方的格子！！！！！！ 

因此写成双重循环即可。因为要用到上方、左方的值，数组第一行和第一列会超出边框，其实只需要把这个方向设为前面的那个路径值即可。

这个算法的时间啊复杂度是O(m * n)，空间复杂度是O(m * n)。


########### CODES ##############
if not grid or not grid[0]: return 0
        m, n = len(grid), len(grid[0])
        path = copy.deepcopy(grid)
        for i in range(m):
            for j in range(n):
                if i == 0 and j == 0:  
                    before = 0   ###  单独设置before区分3种情况，避免边角格子的回溯min比较
                elif i == 0:        ###这里考虑边角的0行0列，他们只能从上方或者左方来，所以用if单独考虑，这里单独设置一个before，之后再设置总的path DP表达式！
                    before = path[i][j-1]
                elif j == 0:
                    before = path[i-1][j]
                else:
                    before = min(path[i-1][j], path[i][j-1])。    #新的一个点的最短路径一定等于其上方、左方最短路径+当前的值。

                path[i][j] = before + grid[i][j]
        return path[m-1][n-1]
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/82620422
