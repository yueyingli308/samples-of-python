#Input: [[1,3],[2,6],[8,10],[15,18]]
#Output: [[1,6],[8,10],[15,18]]
#Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        
        ###每次比较lower bound的大小排序
        result = []
        intervals.sort(key=lambda x: x[0])  ##每一个intervals的第一个值来进行排序.先排序一下intervals
        
        i = 0
        while i < len(intervals):
            cur_start = intervals[i][0]
            cur_end = intervals[i][1]
            if result:
                prev_start,prev_end = result[-1]   ##每次都和结果都最后一个比较
                ### [1,7],[2,6]
                hi = min(prev_end,cur_end)  #min[7,6]=6
                lo = max(prev_start,cur_start)
                
                if lo <= hi:   #例如[1,5],[2,6]中
                    if cur_end > prev_end:  ##此时2个intervals存在部分“overlap”部分遮盖
                        result[-1][1] = cur_end
                else:  #最小的end值小于做大的start值
                    result.append(intervals[i])  
            else:  ##这个是给第一个interval加入作准备的
                 result.append(intervals[i])  #两个intervals不重叠，例：[8,10],[15,18]
            i += 1
        return result
        
        
       # ------------summary
       # 1.对interval的开始数排序
       #2.每次那新的interval间隔和上一个合并建哥对比，看是否有重叠！！！！
       #3.是否有重叠通过2个间隔【start，end】 - 两条线段“最前面的end和最后面的start“来比较，来看重叠与否，画个图会非常清楚！！！
       #4. 通过判断来看是直接加 result.append(intervals[i])，还是扩大上一个的涵盖范围result[-1][1] = cur_end
        
