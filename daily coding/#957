题目要求：
题意
给定一行8个格子，用类似于生命游戏的方法进行更新：

如果相邻有2个格子被占用或有2个格子为空，则变为被占用
否则变为空
问N步后这8个格子的状态。N <= 1e9。
reference：https://zhanghuimeng.github.io/post/leetcode-957-prison-cells-after-n-days/ 


class Solution:
    def prisonAfterNDays(self, cells: List[int], n: int) -> List[int]:
        '''if n == 0:
            return cells
        
        
        for i in range(1,n+1):
            ncells = [0]*len(cells)
            for j in range(1,len(cells)-1):
                ncells[0] = ncells[-1] = 0
                if cells[j-1] == cells[j+1]:
                    ncells[j] = 1
                else:
                    ncells[j] = 0
            cells = ncells
        return cells
        这道题开始没有注意每次更新的cells格子数值都变改变了，所以应该先建立一个空白的新list
        之后出现超时问题，应该用循环来看是多少次后出现一个循环变化，之后除以循环数得到余数'''
        def find(cells):
            tmp = [0] * 8
            for i in range(1, 7):
                tmp[i] = 1 if cells[i - 1] == cells[i + 1] else 0
            return tmp
        
        cycle = []
        state = find(cells)
        while state not in cycle:
            cycle.append(state)
            state = find(state)
        return cycle[(n - 1) % len(cycle)]
        
