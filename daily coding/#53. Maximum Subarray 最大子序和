题目描述
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

题目大意
找出子数组的最大和。
————————————————

###### 不同起点，不同长度的可能性答案，优先考虑DP！！
明显的DP方法去解决。

通过构建一个和原长一样长的数组， dp 数组的含义是以 dp[i] 为结尾的最大子数组的和。

状态转移公式：

dp[i] = dp[i - 1] + nums[i] 当 nums[i] >= 0 。
dp[i] = nums[i] 当 nums[i] < 0 。
题目求的最大子数组的和，就是 dp 数组的最大值。


class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0 for _ in range(len(nums))]
        dp[0] = nums[0]
        for i in range(1,len(nums)):
            dp[i] = max(dp[i-1]+nums[i],nums[i])
        return max(dp)
