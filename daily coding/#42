42. Trapping Rain Water 


给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。

示例:

输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

############# 注意该问题从数学角度出发找规律下的通用公式解是最好的！ ####
问题分析：
方法一，我们观察其中的一个位置，单独考虑这个位置的容量是多少？毫无疑问，我们只要知道，这个位置左边最高的那个边，和右边最高的那个边，两者取小的，然后再减去本身的大小，
那么结果就是这个位置的容量。所以，
（1）从左向右进行扫描，获取每个位置的左边最高的边。
（2）从右向左进行扫描，获取每个位置的右边最高的边。
（3）再遍历一边，计算出每个位置的容量，累加，即结果。
————————————————

class Solution:
    def trap(self, height):
 
        if not height: return 0
        n, res = len(height), 0
        left_max, right_max = [0] * n, [0] * n
 
        left_max[0] = height[0]
        for i in range(1, n):  # 从左向右扫描一遍，求出每个位置左边最高的边
            left_max[i] = max(height[i], left_max[i - 1])
 
        right_max[n - 1] = height[n - 1]
        for i in range(n-2, -1, -1):  # 从右向左扫描一遍，求出每个位置右边最高的边. ##(n-2)到0，即比-1大的前一个数
            right_max[i] = max(height[i], right_max[i + 1])
 
        for i in range(1, n-1):  # 扫描每一个位置，用当前位置左右最短的边，作为长度，并减去当前位置的值，就是当前位置的容量
            res += min(left_max[i], right_max[i]) - height[i]
        return res
 

————————————————
版权声明：本文为CSDN博主「GrowthDiary007」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/XX_123_1_RJ/article/details/81048041



####################### 另一个思路
思路：
此题主要思路是维护一个递减栈。当遇到一个不断递减的bar时，元素入栈。当遇到高的bar时，栈顶元素先行pop出来作为一个洼地，即base，然后储水面积的高度取决于栈顶元素与扫描到的元素中小的那个，
宽度取决于扫描元素的位置以及弹出一次后stack的栈顶元素的前一个位置。
如：[6,4,3,2,1,5]这个水槽，当扫描到5时，高度为min(2, 5)， 宽度为5 - 3 - 1,然后把1pop掉，栈顶元素为2，对应高度min(3, 5)，宽度 5-2-1。
以此类推，把3，4都可以弹出然后5入栈，计算结束。把上述过程中得到的矩形相加即是结果

class Solution:
    def trap(self, height: List[int]) -> int:
        if not height or len(height) == 0: 判断边界条件
            return 0
        stack = []
        res = 0
        for i in range(len(height)):
            while len(stack) != 0 and height[stack[-1]] < height[i]: 维护递减栈。栈空时不弹出
                area = 0
                base = height[stack.pop()] 栈顶元素的位置对应着洼地的高度
                if len(stack) == 0: break 栈空时不做后续操作
                h = min(height[i], height[stack[-1]]) - base
                w = i- stack[-1] - 1
                area = h*w
                res += area
            stack.append(i) 入栈
        return res        
————————————————
版权声明：本文为CSDN博主「Bourns_A」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/Bourns_A/article/details/107357716
