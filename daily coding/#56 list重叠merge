题目描述
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

题目大意
这个题目意思是在数轴上有多个区间，如果能合并成更大区间的就合并在一起。


————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/69078468


class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        
        ###每次比较lower bound的大小排序
        result = []
        intervals.sort(key=lambda x: x[0])  ##每一个intervals的第一个值来进行排序.先排序一下intervals
        
        i = 0
        while i < len(intervals):
            cur_start = intervals[i][0]
            cur_end = intervals[i][1]
            if result:
                prev_start,prev_end = result[-1]   ##每次都和结果都最后一个比较
                ### [1,7],[2,6]
                hi = min(prev_end,cur_end)  #min[7,6]=6
                lo = max(prev_start,cur_start)
                
                if lo <= hi:   #例如[1,5],[2,6]中
                    if cur_end > prev_end:  ##此时2个intervals存在部分“overlap”部分遮盖
                        result[-1][1] = cur_end
                else:  #最小的end值小于做大的start值
                    result.append(intervals[i])  
            else:  ##这个是给第一个interval加入作准备的
                 result.append(intervals[i])  #两个intervals不重叠，例：[8,10],[15,18]
            i += 1
        return result
