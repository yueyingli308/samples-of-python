https://www.jianshu.com/p/19646724ed67

#LC 518

You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

Note: You can assume that

0 <= amount <= 5000
1 <= coin <= 5000
the number of coins is less than 500
the answer is guaranteed to fit into signed 32-bit integer
Example 1:

Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

题目大意
有一堆一定面额的硬币，问有多少种可以组成amount的方案。假定硬币的数量是不限量的。

解题方法
DP。第一感觉是完全背包问题，但其实由于没有重量和价值的对应关系，所以不一样。

生成了一个一维数组dp，dp[i]代表了生成总价值为i有多少方案。

对已有的所有面值的硬币进行遍历，其实思路很简单：dp[i] += dp[i - coin]，价值为i的解决方案应该加上价值为i - coin的解决方案。

时间复杂度是O(L * A)，空间复杂度是O(A); A = amount.

代码如下：
class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        dp = [0] * (amount + 1)
        dp[0] = 1
        for coin in coins:
            for i in range(1, amount + 1):
                if coin <= i:
                    dp[i] += dp[i - coin]
        return dp[amount]
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/82845212
