Skyline


######################### 解法1
另一个解法
def getSkyline(buildings):
    """
    :type buildings: List[List[int]]
    :rtype: List[List[int]]
    """
    events = []
    for l, r, h in buildings:
            events.append([l, -h, r])
            events.append([r, 0, -1])
    events.sort()
    print(events)

    res, hp = [], [(0, float("inf"))]
    for l, h, r in events:
        while l >= hp[0][1]: 
            print('kan',l,hp[0][1])
            heapq.heappop(hp) 
            print('pop!',hp)
            
        if h:  ###新的起始点出现
            heapq.heappush(hp, (h, r))
            print('push!',hp)
            
        if not res or res[-1][1] != -hp[0][0]:  ###新的起始点大于现在的最高值终点，所以去掉作废的段落
            res.append([l, -hp[0][0]])
            print('res!',res)
            
    return res
 
https://nagato1208.github.io/2019/08/25/leetcode-218-The-Skyline-Problem/
https://leetcode.com/problems/the-skyline-problem/discuss/1285266/Python-solution-with-explanation



##################### 类似的题目
最佳价格区间
def getSkyline(buildings):
    """
    :type buildings: List[List[int]]
    :rtype: List[List[int]]
    """
    events = []
    for l, r, h in buildings:
        events.append([l, h, r])
        events.append([r, 0, -1])
    events.sort()
    print(events)
    res, hp = [], [(float("inf"),float("inf"))]
    for l, h, r in events:
        while l >= hp[0][1]: 
            print('kan',l,hp[0][1])
            heapq.heappop(hp) 
            print('pop!',hp)
        if h:
            heapq.heappush(hp, (h, r))
            print('push!',hp)
        if not res or res[-1][1] != hp[0][0]: 
            res.append([l, hp[0][0]])
            print('res!',res)
    return res
    
    
    
    
    ---------- 一进一出，pre_h是存入的最小值，cur_p是当前的，返回最小值 ----------

import heapq
def getSkyline(buildings):
    n = len(buildings)
    points = sorted([(buildings[i][0], buildings[i][2], 's') for i in range(n)] +
                    [(buildings[i][1], buildings[i][2], 'e') for i in range(n)])
    print (points)
    result, maxHeap = [], []
    for p in points:
        pre_height =  maxHeap[0] if maxHeap else 0
        if p[2] == 's':
            heapq.heappush(maxHeap, p[1])
        else:
            heapq.heappop(maxHeap)
        cur_height = maxHeap[0] if maxHeap else 0
        print(maxHeap,p[1],pre_height,cur_height)

        if p[2] == 's' and p[1] <= cur_height:
            result.append([p[0], p[1]])
        elif p[2] == 'e' and p[1] < pre_height:
            result.append([p[0], min(pre_height,cur_height)])
        print(result)

    return result
