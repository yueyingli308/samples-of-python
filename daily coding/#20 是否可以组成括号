题目描述
Given a string containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’ and ‘]’, determine if the input string is valid.

The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.

注意example的设置：
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"   #必须是左然后右，成对成对的消灭
Output: true

题目大意
有三种括号组成的字符串，看最后的结果是否能组成正常的括号。
————————————————
Python，使用的也是栈。

def isValis(self, s):
        parentheses = {"(": ")", "[": "]", "{": "}"}

        stack = []   # Array Implementation of stack，加一个空list来储存s里的左括号

        for c in s:
            if c in parentheses:
                stack.append(c) # Push in stack
            else:
                if not stack or parentheses[stack.pop()] != c:  # "]"
                    return False

        return not stack


------------- 6.24自己写的不对
def isValid(self, s: str) -> bool:
        if len(s) == 1:
            return False
        dic = {'(':')','{':'}','[':']'}
        lis = []
        for c in s:
            if c in dic:
                lis.append(c)
            elif (c not in dic) and (dic[lis[-1]] == c):    ##这里不太好，应该直接写false的地方
                lis.pop()
            else:
                return False
 ## pop函数
 print(list.pop()) ---> 最后一位删除的那个值
list.pop()
 print(list) ---> 删除了最后一位之后的list，list本身已经被改动过
        return len(lis) == 0
