Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
题目描述：找到所有的数据分组





class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        self.res = []
        if not nums:
            return self.res
        self.dfs(0, nums, [])
        return self.res
    def dfs(self, s, nums, tmp):     ####s==index
        self.res.append(tmp)    ###每次把当前数组先传上来
        for i in range(s, len(nums)):    ###每次s也要递归更改
            self.dfs(i + 1, nums, tmp + [nums[i]])   ###index+1,往后看是否还有数据，类似于subset1=[1,2],接下来找subset2=[1,2,3]
        
        #####https://www.youtube.com/watch?v=Az3PfUep7gk
        
        
 #方法2:
 class Solution:
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        def dfs(nums,temp,i):
            self.res.append(temp[:])
            for i in range(i,len(nums)):
                temp.append(nums[i])
                dfs(nums,temp,i+1)
                temp.pop()
                
        dfs(nums,[],0)
        return self.res
        #########来源：https://www.jianshu.com/p/9dfd3d980492
