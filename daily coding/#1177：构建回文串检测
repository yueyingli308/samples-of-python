class Solution:
    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        ###首先区间查询问题不难想到前缀和，由于这里需要统计字母，所有不难想到建立26前缀和数组。

#接着思考替换回文字串的问题。这是一个找规律的问题，实际上最少的替换次数，就是将区间内所有字符出现的次数统计一遍，所有奇数次数的字符就是要替换的（因为偶数字符会两两匹配）。我们假设出现奇数次数的字符总共有n个，而我们只需要其中一个字符变成另一个，所以最后只需要n//2此变换。
        cnt = [[0] * 26]  #[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
     
        for i, v in enumerate(s):   ##只是把str变成一个个的字典了，没有记数！
            cnt.append(cnt[i][:])
            cnt[i+1][ord(v) - 97] += 1   ##print ord('a'), ord('0'), ord('1')  97 48 49，ord()函数参数是一个ascii字符，返回值是对应的十进制整数
       ######### 这时的cnt即是每一个list.append是累加前n行的字母出现数目
######文字解释！！！
0 a
1 b
2 c
3 d
4 a
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
######解释！
        res = []
        for i, j, k in queries:
            res.append(sum((cnt[j+1][idx] - cnt[i][idx])&1 for idx in range(26))//2 <= k)   ##3个奇数个的有3//2=1个能变就好
        ### int&1 只要是奇数就返回1，偶数返回0
        return res  
        
