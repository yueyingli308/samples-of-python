####题目描述：
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

#####思路和#39类似，2个更改：
#####1.除去了重复出现的组合
#####2.每次继续累加的时候，从i+1开始，避免重复list[i]



class Solution:
    
    ###和上一题比，还要注意去掉重复值和重复出现的排列组合
    
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        path = []
        res = []
        candidates = sorted(candidates)
        self.Solver(res, path, candidates, target, 0)
        return res
    
    
    def Solver(self, res, path, candidates, target, idx):
        for i in range(idx, len(candidates)):
            new_target = target - candidates[i]
            if new_target < 0:
                return          ###说明这个排列组合是无法加和为target的，return空
            else:
                if new_target == 0:
                    i2 = path + [candidates[i]]
                    if not i2 in res:   ##排列组合成立  记得要排除一下重复额组合
                        res.append(i2) 
                    else:
                        self.Solver(res, path + [candidates[i]], candidates,new_target, i+1) 
                else:
                    self.Solver(res, path + [candidates[i]], candidates,new_target, i+1)          ### 继续累加
        
