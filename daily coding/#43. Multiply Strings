## 给定两个以字符串形式表示的非负整数 num1和 num2，返回num1 和 num2 的乘积，它们的乘积也表示为字符串形式
## num1 和 num2 的长度小于110。
## num1 和 num2 只包含数字 0-9。
## num1 和 num2 均不以零开头，除非是数字 0 本身。
## 不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。


class Solution:
    def multiply(self, num1: str, num2: str) -> str:
       
            
###基本思路如下：
#（1）可以先把字符串翻转过来，即，从低位开始计算。
#（2）用一个数组去维护最后的结果，每相乘一次就进行一次更新，但是，要注意进位的情况（ 注意两点，同一位相加进位，从低位到高位的相乘是要有进位的。）
#（3）最后，舍弃数组前面的0，并转化成字符串输出，即可。
            
            
        if (num1=='0' or num2=='0'):
            return '0'
        
        res = [0] * (len(num1) + len(num2))  # 初始化，存放乘积的数组
        pos = len(res) - 1

        for n1 in reversed(num1):   ### str型数据可以直接选取单字母！
            tempPos = pos
            for n2 in reversed(num2):   ##思路和我们手写公式计算乘积结果一样！每一个
                res[tempPos] += int(n1) * int(n2)
                res[tempPos - 1] += res[tempPos] // 10  # 进位：倒着来的，所以进位是写在-1的位置的
                res[tempPos] %= 10  # 取余     
                tempPos -= 1
            pos -= 1

        st = 0
        while st < len(res) - 1 and res[st] == 0:  # 统计前面有几个0
            st += 1
        return ''.join(map(str, res[st:]))  # 去掉0，然后变成字符串，并返回
