Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

题目大意
构建杨辉三角。


########## 自己写的
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 1:
            return [[1]]   #！首先特殊情况要考虑进去！！！！！！！！！！！
            
        dp = [[1] for _ in range (numRows)]
        ##### 这里尤其要注意！！##############
        ##### dp = [[1]*3]            ------》     [[1, 1, 1]]

            dp1 = [[1] for _ in range (3)] ——————》 [[1], [1], [1]] ######结果不同！

        
        dp[1].append(1)       list后面直接多缀一个数是list.append(int)!注意变量各个的格式
        
        for i in range(2,numRows):
            #dp[i].append(1)
            for j in range(1,i):    
                dp[i].append(dp[i-1][j-1]+dp[i-1][j])
            dp[i].append(1)
        return dp



######### 网上更简便的方法
提前构造好三角形，然后再遍历每行的中间位置是上面两行的和即可。

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        ##### 提前构造好三角形！！！
        res = [[1 for j in range(i)] for i in range(1, numRows + 1)]  #### xxx for i in ... 'xxx'即时大【】里的单独循环对象，如果是[xxx]即是[ [],[],[] ]建立小list
        
        for i in range(2, numRows):
            for j in range(1, i):
                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]
        return res
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/51346488
