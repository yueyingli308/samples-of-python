Design a HashMap without using any built-in hash table libraries.

To be specific, your design should include these two functions:

put(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.
get(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
remove(key) : Remove the mapping for the value key if this map contains the mapping for the key.
Example:

MyHashMap hashMap = new MyHashMap();
hashMap.put(1, 1);          
hashMap.put(2, 2);         
hashMap.get(1);            // returns 1
hashMap.get(3);            // returns -1 (not found)
hashMap.put(2, 1);          // update the existing value
hashMap.get(2);            // returns 1 
hashMap.remove(2);          // remove the mapping for 2
hashMap.get(2);            // returns -1 (not found) 

这个题和705. Design HashSet基本一样啊。705是要设计hashset，当时只要把某个位置设置成1，就表示这个元素存在了即可。这个题只需要把当时的设置成1改成设置成对应的value。

写这个题的时候就要考虑，不能把每个位置初始化成0，因为这样会和value值冲突。即加入value就是0，那么这个位置的0不知道怎么判断。所以应该初始化None，
后面对这个位置是否存在元素的判断也是必须判断==None而不是not的方式进行判断。

既然题目中说了数字的范围不会超过 1000000，那么就申请这么大空间的数组，只需将数组的初始化值改为 -1 即可。空间足够大了，就可以直接建立映射，移除时就将映射值重置为 -1，
由于默认值是 -1，所以获取映射值就可以直接去，参见代码如下：

class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.bitmap = [[-1] * 1000 for _ in range(1001)]

    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        row, col = key / 1000, key % 1000
        self.bitmap[row][col] = value

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        row, col = key / 1000, key % 1000
        return self.bitmap[row][col]

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        row, col = key / 1000, key % 1000
        self.bitmap[row][col] = -1


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/81017297
