题目大意
给出了一个m * n的地图，上面有个机器人位于左上角，现在他想到达右下角。但是这个地图某些位置可能有障碍物。它每次只能向右边或者下边走一步，问能到达右下角的方式有多少种。 
 
直接判断是不是到达了最上面一行或者最左边一行，如果不是第一行那么加上上面行的数值，如果不是第一列那么加上第一列的数值。

class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[0] * n for _ in range(m)]
        if obstacleGrid[0][0] == 0:
            dp[0][0] = 1
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j] == 1:     ##本题与unique path I的区别仅在于此，判断是障碍后path路径数清空为1！ 其他与前几乎相同
                    dp[i][j] = 0
                else:
                    if i != 0:
                        dp[i][j] += dp[i - 1][j]
                    if j != 0:
                        dp[i][j] += dp[i][j - 1]
        return dp[m - 1][n - 1]
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/83154114



自己一开始写的
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        if m == 1 and n ==1 and obstacleGrid[0][0] ==0:
            return 1
        if m == 1 and n ==1 and obstacleGrid[0][0] ==1:
            return 0
        
        pd = [[0]*n for _ in range(m)]
        #pd[0][0] = 1
        
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j] == 1:
                    pd[i][j] = 0
                else:
                    if i==0 and j ==0:    ##pd[0][0]要加在具体的实施for循环里面
                        pd[i][j] = 1
                    elif i-1<0:
                        pd[i][j] += pd[i][j-1]
                    elif j-1<0:
                         pd[i][j] += pd[i-1][j]
                    else:
                         pd[i][j] += (pd[i][j-1]+pd[i-1][j])
        return pd[m-1][n-1]
        
