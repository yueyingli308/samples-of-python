原题
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
[-1, 0, 1],
[-1, -1, 2]
]
————————————————

方法二：原数组排序+双指针
这个方法就是上面说的对原数组排序的做法，这个做法思路比较简单，对于排序后的数组遍历，对每个位置都从它的后一个元素和末尾一个元素向中间集中，如果和为0就添加到结果数组中。
!!!!这里需要注意的地方是需要跳过相同的数字，因为同样的数字组合只能出现一次嘛。也就是两个while，注意判断相等的条件：i是向前面判断，j是向后面判断。!!!
  
  ####### 注意可以用排序来帮助！，天然具有左边小右边大的优势，注意利用！！！！！ ########

这个方法不用使用set来保存已经遍历过的数字组合，因为对于原数组来说每次向后遍历的过程中，同样的组合只能出现一次。

时间复杂度是O(N^2)，空间复杂度是O(1)。代码很清晰简短，实际上只超过了24%的提交。

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        N = len(nums)
        nums.sort()   ### nums本身更改，但是不可以赋值
        res = []
        for t in range(N - 2):
            if t > 0 and nums[t] == nums[t - 1]:    #前后值相同 跳过！
                    continue
            i, j = t + 1, N - 1
            while i < j:
                _sum = nums[t] + nums[i] + nums[j]
                if _sum == 0:
                    res.append([nums[t], nums[i], nums[j]])
                    i += 1
                    j -= 1
                    while i < j and nums[i] == nums[i - 1]:  #前后值相同 跳过！（还是为了忽略掉重复的可能性排列）
                        i += 1
                    while i < j and nums[j] == nums[j + 1]:
                        j -= 1
                elif _sum < 0:
                    i += 1
                else:
                    j -= 1
        return res
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/83115850
