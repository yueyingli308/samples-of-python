问题描述：
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

说明: 假设你总是可以到达数组的最后一个位置。

问题分析：
首先，明确一个问题，就是，你可以跳跃的最大长度是当前值，也可以小于当前值，不固定。


现在来看问题，第一次想到的是动态规划，时间复杂度应该是O(n^2)，题目给了提示，贪心算法，一次遍历就可以完成。

（1）贪心的想法是，在跳第一次的时候，就考虑第二次可以达到的最远距离，也就是考虑一个区间，如上图所示。

（2）当遍历到 - 当前位置时- ，如果前一次跳，已经不能到达- 当前位置- ，就要再次跳一次。也就是计数一次，后面依次进行。

（3）也可以理解，从左–>右扫描，维护一个覆盖区间，每遍历一个元素，就重新计算覆盖区间的最右边界。

（4）过程比较难解释，可以阅读一下代码帮助理解。

Python3实现：
————————————————
class Solution:
    def jump(self, nums):
        result = reach = maxReach = 0
        for index, num in enumerate(nums):
            if index > reach:
                reach = maxReach
                result += 1       #### 前一次跳，已经不能到达-当前位置- ，就要再次跳一次。也就是计数一次
            maxReach = max(maxReach, index + num)
        return result


if __name__ == '__main__':
    nums = [2, 3, 1, 1, 4]
    solu = Solution()
    print(solu.jump(nums))
————————————————
版权声明：本文为CSDN博主「GrowthDiary007」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/XX_123_1_RJ/article/details/88753905
